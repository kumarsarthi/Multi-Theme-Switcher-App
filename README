# ThemeCraft - Multi-Theme Switcher App

## Overview

ThemeCraft is a React + TypeScript application that demonstrates dynamic multi-theme switching. It features three distinct themes, responsive design, and modern UI components. Users can switch themes via a dropdown, and their preference is persisted using localStorage.

---

## Features

- **Multi-theme support:** Minimalist Light, Professional Dark, Colorful Creative
- **Theme persistence:** Remembers user selection via localStorage
- **Responsive layout:** Adapts to all device sizes
- **Accessible UI:** Focus styles, reduced motion, high contrast, print support
- **Product showcase:** Fetches products from [Fake Store API](https://fakestoreapi.com/)
- **Navigation:** Home, About, Contact pages
- **Sidebar (theme2):** Quick links for dashboard, analytics, reports, settings
- **Contact form:** Simple form with validation and feedback
- **Modern stack:** React 18, TypeScript, Tailwind CSS, React Router, Lucide icons

---

## Folder Structure

```
src/
  App.tsx                # Main app component, sets up routing and theme provider
  main.tsx               # Entry point, renders the app
  index.css              # Tailwind and custom styles for themes
  components/
    Header.tsx           # Top navigation bar and theme switcher
    Layout.tsx           # Page layout, sidebar for theme2
    ProductCard.tsx      # Displays product info
  contexts/
    ThemeContext.tsx     # Theme context/provider, handles theme switching and persistence
  hooks/
    useApi.ts            # Custom hook to fetch product data
  pages/
    Home.tsx             # Landing page, hero, stats, product grid
    About.tsx            # Info about the app and themes
    Contact.tsx          # Contact form and info
  types/
    index.ts             # TypeScript interfaces and types
```

---

## Technologies & Libraries Used

- **React**
- **TypeScript**
- **Tailwind CSS**
- **React Router**
- **Lucide Icons**
- **Vite**
- **ESLint**
- **PostCSS**
- **Autoprefixer**

---

## How It Works

1. **Theme Switching:**  
   - The theme dropdown in `Header.tsx` lets users select a theme.
   - The selected theme is stored in localStorage and applied via `ThemeProvider`.
   - Theme-specific classes are added to the root div for styling.

2. **Routing:**  
   - `App.tsx` uses React Router for navigation between Home, About, and Contact pages.

3. **Product Fetching:**  
   - `useApi.ts` fetches products from Fake Store API and displays them in `Home.tsx` using `ProductCard.tsx`.

4. **Styling:**  
   - Tailwind CSS is used for utility-first styling.
   - Custom theme styles are defined in `index.css`.

5. **Accessibility & Responsiveness:**  
   - Focus styles, reduced motion, high contrast, and print support are included in `index.css`.

---

## Scripts

- `npm run dev` – Start development server
- `npm run build` – Build for production
- `npm run preview` – Preview production build
- `npm run lint` – Run ESLint

---

## Configuration Files

- `vite.config.ts` – Vite configuration
- `tailwind.config.js` – Tailwind CSS config
- `postcss.config.js` – PostCSS config
- `tsconfig*.json` – TypeScript configs
- `eslint.config.js` – ESLint config

---

## Types

- `Product` – Product data structure
- `ThemeType` – Theme string union
- `ThemeContextType` – Theme context interface

---

## External APIs

- **Fake Store API:** Used for product data in `useApi.ts`

---

## License

MIT
